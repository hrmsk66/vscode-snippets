{
  "tf_required_providers": {
    "scope": "terraform",
    "prefix": "terraform_required_providers",
    "body": [
      "// Version Constraints - the following operators are valid:",
      "// = (or no operator): Allows only one exact version number.",
      "// !=: Excludes an exact version number.",
      "// >, >=, <, <=: Comparisons against a specified version.",
      "// ~>: Allows only the rightmost version component to increment.",
      "terraform {",
      "\trequired_providers {",
      "\t\tfastly  = {",
      "\t\t\tsource  = \"fastly/fastly\"",
      "\t\t\tversion = \">= $1\"",
      "\t\t}",
      "\t}",
      "}"
    ]
  },
  "tf_service": {
    "scope": "terraform",
    "prefix": "terraform_simple_service",
    "body": [
      "locals {",
      "  domain = \"$1.global.ssl.fastly.net\"",
      "}",
      "",
      "resource \"fastly_service_vcl\" \"service\" {",
      "  name          = local.domain",
      "",
      "  domain {",
      "    name = local.domain",
      "  }",
      "",
      "  backend {",
      "    name              = \"httpbin\"",
      "    address           = \"httpbin.org\"",
      "    port              = 443",
      "    use_ssl           = true",
      "    ssl_cert_hostname = \"httpbin.org\"",
      "    ssl_sni_hostname  = \"httpbin.org\"",
      "  }",
      "",
      "  # vcl {",
      "  #   name    = \"main\"",
      "  #   content = file(\"${path.module}/vcl/main.vcl\")",
      "  #   main    = true",
      "  # }",
      "",
      "  # snippet {",
      "  #   content  = file(\"${path.module}/vcl/recv_example.vcl\")",
      "  #   name     = \"example snippet\"",
      "  #   type     = \"recv\"",
      "  #   priority = 100",
      "  # }",
      "",
      "  # dynamic \"snippet\" {",
      "  #   for_each = var.prod ? [] : [1]",
      "  #   content {",
      "  #     content  = file(\"${path.module}/vcl/recv_example.vcl\")",
      "  #     name     = \"example dynamic block\"",
      "  #     type     = \"recv\"",
      "  #     priority = 100",
      "  #   }",
      "  # }",
      "",
      "  force_destroy = true",
      "}",
      ""
    ],
    "description": "tf_service"
  },
  "tf_acl_service": {
    "scope": "terraform",
    "prefix": "terraform_acl_service",
    "body": [
      "variable \"domain\" {",
      "  type = string",
      "}",
      "",
      "variable \"enable_acl\" {",
      "  type    = bool",
      "  default = true",
      "}",
      "",
      "variable \"allowed_ips\" {",
      "  type = set(object({",
      "    ip      = string",
      "    subnet  = number",
      "    comment = string",
      "  }))",
      "  default = []",
      "}",
      "",
      "resource \"fastly_service_vcl\" \"service\" {",
      "  name = var.domain",
      "",
      "  domain {",
      "    name = $1var.domain",
      "  }",
      "",
      "  backend {",
      "    name              = \"httpbin\"",
      "    address           = \"httpbin.org\"",
      "    port              = 443",
      "    use_ssl           = true",
      "    ssl_cert_hostname = \"httpbin.org\"",
      "    ssl_sni_hostname  = \"httpbin.org\"",
      "  }",
      "",
      "  // Conditionally add ACL",
      "  dynamic \"snippet\" {",
      "    for_each = var.enable_acl ? [1] : []",
      "",
      "    content {",
      "      content  = <<-EOT",
      "        if (fastly.ff.visits_this_service == 0 && req.http.Fastly-Client-IP !~ allow_list) {",
      "            error 403 \"Forbidden\";",
      "        }",
      "      EOT",
      "      name     = \"recv_acl\"",
      "      type     = \"recv\"",
      "      priority = 100",
      "    }",
      "  }",
      "",
      "  dynamic \"acl\" {",
      "    for_each = var.enable_acl ? [1] : []",
      "",
      "    content {",
      "      name          = \"allow_list\"",
      "      force_destroy = true",
      "    }",
      "  }",
      "",
      "  force_destroy = true",
      "}",
      "",
      "# ACL entries",
      "resource \"fastly_service_acl_entries\" \"entries\" {",
      "  count = length(var.allowed_ips) != 0 ? 1 : 0",
      "",
      "  service_id     = fastly_service_vcl.service.id",
      "  acl_id         = one(fastly_service_vcl.service.acl).acl_id",
      "  manage_entries = true",
      "",
      "  dynamic \"entry\" {",
      "    for_each = var.allowed_ips",
      "",
      "    content {",
      "      ip      = entry.value.ip",
      "      subnet  = entry.value.subnet",
      "      comment = entry.value.comment",
      "      negated = false",
      "    }",
      "  }",
      "}"
    ],
    "description": "tf_acl_service"
  },
  "tf_acl_tfvars": {
    "scope": "terraform",
    "prefix": "terraform_acl_tfvars",
    "body": [
      "domain = \"$1acl.example.com\"",
      "",
      "enable_acl = true",
      "",
      "allowed_ips = [",
      "  {",
      "    ip      = \"192.168.1.0\"",
      "    subnet  = 24",
      "    comment = \"Segment 1\"",
      "",
      "  },",
      "  {",
      "    ip      = \"192.168.2.0\"",
      "    subnet  = 28",
      "    comment = \"Segment 2\"",
      "  },",
      "]",
      ""
    ],
    "description": "tf_acl_tfvars"
  },
  "tf_cert": {
    "scope": "terraform",
    "prefix": "terraform_cert",
    "body": [
      "provider \"aws\" {",
      "  region = \"ap-northeast-1\"",
      "}",
      "",
      "locals {",
      "  domains = toset([\"$1domain1.example.com\", \"$2domain2.example.com\"])",
      "  dns_zone = \"example.com\"",
      "}",
      "",
      "data \"fastly_tls_configuration\" \"configuration\" {",
      "  name = \"HTTP/3 & TLS v1.3\"",
      "}",
      "",
      "data \"aws_route53_zone\" \"zone\" {",
      "  name         = local.dns_zone",
      "  private_zone = false",
      "}",
      "",
      "resource \"fastly_tls_subscription\" \"subscription\" {",
      "  domains               = local.domains",
      "  configuration_id      = data.fastly_tls_configuration.configuration.id",
      "  certificate_authority = \"lets-encrypt\"",
      "  force_destroy         = true",
      "}",
      "",
      "resource \"aws_route53_record\" \"domain_validation\" {",
      "  depends_on = [fastly_tls_subscription.subscription]",
      "  count      = length(local.domains)",
      "",
      "  allow_overwrite = true",
      "  zone_id         = data.aws_route53_zone.zone.zone_id",
      "  name            = tolist(fastly_tls_subscription.subscription.managed_dns_challenges)[count.index].record_name",
      "  type            = tolist(fastly_tls_subscription.subscription.managed_dns_challenges)[count.index].record_type",
      "  records         = [tolist(fastly_tls_subscription.subscription.managed_dns_challenges)[count.index].record_value]",
      "  ttl             = 60",
      "}",
      "",
      "resource \"fastly_tls_subscription_validation\" \"validation\" {",
      "  subscription_id = fastly_tls_subscription.subscription.id",
      "  depends_on      = [aws_route53_record.domain_validation]",
      "}",
      "",
      "resource \"aws_route53_record\" \"records\" {",
      "  for_each = local.domains",
      "",
      "  depends_on      = [fastly_tls_subscription_validation.validation]",
      "  allow_overwrite = true",
      "  zone_id         = data.aws_route53_zone.zone.zone_id",
      "  name            = each.key",
      "  type            = \"CNAME\"",
      "  records         = [one([for r in data.fastly_tls_configuration.configuration.dns_records : r.record_value if r.record_type == \"CNAME\"])]",
      "  ttl             = 300",
      "}",
      ""
    ],
    "description": "tf_cert"
  },
  "dictionary": {
    "scope": "terraform",
    "prefix": "dictionary",
    "body": [
      "locals {",
      "  dictionary_name = \"mydict\"",
      "  dictionary_items = {",
      "    \"key1\" : \"value1\",",
      "    \"key2\" : \"value2\",",
      "  }",
      "}",
      "",
      "resource \"fastly_service_dictionary_items\" \"items\" {",
      "  for_each = {",
      "    for d in fastly_service_vcl.service.dictionary : d.name => d if d.name == local.dictionary_name",
      "  }",
      "",
      "  service_id    = fastly_service_vcl.service.id",
      "  dictionary_id = each.value.dictionary_id",
      "  items         = local.dictionary_items",
      "  manage_items  = true",
      "}"
    ]
  }
}
